module StdMain
  ( LogTIO
  , stdMain, stdMainSimple, stdMain', stdMain'', stdMainT, stdMainT'
  , stdMainNoDR, stdMainNoDR'
  )
where

-- base --------------------------------

import Control.Applicative     ( pure )
import Control.Exception       ( Exception )
import Control.Monad.IO.Class  ( MonadIO )
import Data.Function           ( ($) )
import Data.String             ( String, unwords, words )
import System.IO               ( IO )
import Text.Show               ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â°) )
import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )
import Data.Ord.Unicode       ( (‚â§) )
import GHC.Stack              ( HasCallStack )

-- data-textual ------------------------

import Data.Textual  ( Printable, toString, toText )

-- exited ------------------------------

import qualified  Exited
import Exited  ( ToExitCode )

-- has-callstack -----------------------

import HasCallstack  ( HasCallstack )

-- log-plus ----------------------------

import Log              ( Log
                        , logToFile', logFilter, logToStderr', stdRenderers )
import Log.LogEntry     ( LogEntry, attrs, mapPrefixDoc )
import Log.HasSeverity  ( severity )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT )

-- mockio ------------------------------

import MockIO               ( DoMock( DoMock, NoMock ), HasDoMock )

-- mockio-log --------------------------

import MockIO.Log           ( MockIOClass )
import MockIO.IOClass       ( HasIOClass, (‚àà), ioClass )
import MockIO.RenderDoMock  ( renderWithDoMock )

-- monaderror-io -----------------------

import MonadError           ( —• )
import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import MonadIO.File  ( FileOpenMode( FileW ), HEncoding( UTF8 )
                     , fileWritable, withFile )

-- more-unicode ------------------------

import Data.MoreUnicode.Either   ( pattern ùï∑, pattern ùïΩ )
import Data.MoreUnicode.Functor  ( (‚ä≥) )
import Data.MoreUnicode.Lens     ( (‚ä£) )
import Data.MoreUnicode.Maybe    ( pattern ùïµ, pattern ùïπ )
import Data.MoreUnicode.Monad    ( (‚â´) )
import Data.MoreUnicode.Monoid   ( —é )
import Data.MoreUnicode.Text     ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, throwError )
import Control.Monad.Reader  ( ReaderT, runReaderT )
import Control.Monad.Trans   ( lift )

-- natural-plus ------------------------

import Natural  ( Natty, One, none, one, count )

-- optparse-applicative ----------------

import Options.Applicative  ( Parser, footerDoc, progDesc )
import Options.Applicative.Help.Pretty  ( Doc
                                        , (<+>)
                                        , align, empty, fillBreak, fillSep
                                        , indent, string, text
                                        , vcat
                                        )

-- optparse-plus -----------------------

import OptParsePlus  ( parseOpts )

-- prettyprinter -----------------------

import qualified Data.Text.Prettyprint.Doc  as  PPDoc

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import StdMain.StdOptions      ( DryRunLevel, HasDryRunLevel( dryRunLevel )
                               , StdOptions
                               , callstackOnError, ifDryRun, options
                               , parseStdOptions, profCallstackOnError
                               )
import StdMain.UsageError      ( AsUsageError, UsageIOError, throwUsage )
import StdMain.VerboseOptions  ( ShowIOCs( DoShowIOCs )
                               , csopt, ioClassFilter, logFile, showIOCs
                               , unLogFile, verboseDesc, verboseOptions
                               )

--------------------------------------------------------------------------------

{- | Like `stdMain`, but gives the incoming `io` full access to the `StdOptions`
     object. -}

stdMain_ ‚à∑ ‚àÄ Œµ œÅ œÉ œâ ŒΩ Œº .
           (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
            HasCallstack Œµ, ToExitCode œÉ, HasIOClass œâ, HasDoMock œâ,
            HasCallStack) ‚áí
           Natty ŒΩ  -- ^ `DryRun` level
         ‚Üí ùïã        -- ^ program synopsis
         ‚Üí Parser œÅ -- ^ options parser
         ‚Üí (StdOptions ŒΩ œÅ ‚Üí LoggingT (Log œâ) (ExceptT Œµ IO) œÉ) -- ^ program
         ‚Üí Œº ()
stdMain_ n desc p io = do
  let optionDesc ‚à∑ String ‚Üí [String] ‚Üí Doc
      optionDesc name descn =
        let para = fillSep $ text ‚ä≥ (words $ unwords descn)
         in indent 2 (fillBreak 14 (string name) <+> align para)
      optionDesc' ‚à∑ String ‚Üí Doc ‚Üí Doc
      optionDesc' name para =
        indent 2 (fillBreak 14 (string name) <+> align para)
      footerDesc ‚à∑ Doc
      footerDesc = vcat ([ empty, string "Standard options:"
                         , optionDesc "-v" [ "Increase verbosity.  This may"
                                           , "be used up to 3 times (which is"
                                           , "equivalent to --debug); and is"
                                           , "exclusive with --quiet,"
                                           , "--debug, and --verbose."
                                           ]

                         , optionDesc "--quiet" [ "Decrease verbosity.  This "
                                                , "may be used up to 4 times;"
                                                , "and is exclusive with -v,"
                                                , "--debug, and --verbose."
                                                ]

                         , optionDesc "--debug" [ "Set verbosity to maximum"
                                                , "(debug level).  This option "
                                                , "is exclusive with -v,"
                                                , "--quiet, and --verbose."
                                                ]
                         ] ‚äï case count n of
                               0 ‚Üí []
                               1 ‚Üí [ optionDesc "--dry-run"
                                                [ "Do not make any changes; "
                                                , "just pretend."
                                                ]
                                   ]
                               _ ‚Üí [ optionDesc "--dry-run"
                                                [ "Do not make any changes; "
                                                , "just pretend.  May be used"
                                                , "up to ", show (count n)
                                                , " times."
                                                ]
                                   ]

                         ‚äï [ optionDesc' "--verbose=OPTS" verboseDesc
                           , optionDesc "--callstack-on-error / -!"
                                                [ "In case of error, show"
                                                , "a callstack of where the"
                                                , "error was created."
                                                ]
                           , optionDesc "--prof-callstack-on-error / -#"
                                                [ "In case of error, show"
                                                , "a profiler-generated"
                                                , "callstack of where the error"
                                                , "was created if one is"
                                                , "available."
                                                ]
                           ]
                        )
  o ‚Üê parseOpts ùïπ (progDesc (toString desc) ‚äï footerDoc (ùïµ footerDesc))
                  (parseStdOptions n p)
  let vopts      = o ‚ä£ verboseOptions
      ioClasses  = vopts ‚ä£ ioClassFilter
      sevOpt     = o ‚ä£ severity
      renderers  = renderWithDoMock : stdRenderers (vopts ‚ä£ csopt)

      prefixIOC ‚à∑ ‚àÄ Œ± Œ≤ . HasIOClass Œ± ‚áí LogEntry Œ± ‚Üí PPDoc.Doc Œ≤
      prefixIOC le =
        PPDoc.braces (PPDoc.pretty ‚àò toText $ le ‚ä£ attrs‚àòioClass) ‚äï PPDoc.space
      filters    = —é [ if vopts ‚ä£ showIOCs ‚â° DoShowIOCs
                       then [ pure ‚àò mapPrefixDoc prefixIOC ]
                       else []
                     , [ \ le ‚Üí if le ‚ä£ severity ‚â§ sevOpt then [le] else []
                       , logFilter (\ le ‚Üí (le ‚ä£ attrs ‚àò ioClass) ‚àà ioClasses)
                       ]
                     ]
      logIOToFile i o' h = logToFile' renderers filters h (i o')


  Exited.doMainCS (o ‚ä£ callstackOnError, o ‚ä£ profCallstackOnError) $
    case vopts ‚ä£ logFile of
      ùïπ       ‚Üí logToStderr' renderers filters (io o)
      ùïµ logfn ‚Üí —• (fileWritable (unLogFile logfn)) ‚â´ \ case
                  ùï∑ e     ‚Üí throwError e
                  ùïΩ (ùïµ e) ‚Üí throwUsage $ "bad log file: " ‚äï e
                  ùïΩ ùïπ     ‚Üí withFile UTF8 (FileW $ ùïµ 0640)
                                          (unLogFile logfn) (logIOToFile io o)


----------

{- | Execute the 'main' of a standard program with standard options that returns
     a `toExitCode`, that may throw exceptions; with logging set up as requested
     by cmdline options.
 -}
stdMain ‚à∑ ‚àÄ Œµ œÅ œÉ œâ ŒΩ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ, HasIOClass œâ, HasDoMock œâ) ‚áí
          Natty ŒΩ
        ‚Üí ùïã
        ‚Üí Parser œÅ
        ‚Üí (DryRunLevel ŒΩ ‚Üí œÅ ‚Üí LoggingT (Log œâ) (ExceptT Œµ IO) œÉ)
        ‚Üí Œº ()
stdMain n desc p io =
  stdMain_ n desc p (\ o ‚Üí io (o ‚ä£ dryRunLevel) (o ‚ä£ options))


--------------------

{- | Like `stdMain`, but with `DryRun` option. -}

stdMainNoDR ‚à∑ ‚àÄ Œµ œÅ œÉ œâ Œº .
              (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
               HasCallstack Œµ, ToExitCode œÉ, HasIOClass œâ, HasDoMock œâ) ‚áí
              ùïã
            ‚Üí Parser œÅ
            ‚Üí (œÅ ‚Üí LoggingT (Log œâ) (ExceptT Œµ IO) œÉ)
            ‚Üí Œº ()

stdMainNoDR desc p io =
  stdMain_ none desc p (\ o ‚Üí io (o ‚ä£ options))

--------------------

type LogTIO œâ Œµ = (LoggingT (Log œâ) (ExceptT Œµ IO))

{- | Like StdMain, but runs the io in a `ReaderT (DryRunLevel ŒΩ)` context. -}
stdMainT ‚à∑ ‚àÄ Œµ œÅ œÉ œâ ŒΩ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ, HasIOClass œâ, HasDoMock œâ) ‚áí
          Natty ŒΩ
        ‚Üí ùïã
        ‚Üí Parser œÅ
        ‚Üí (œÅ ‚Üí ReaderT (DryRunLevel ŒΩ) (LogTIO œâ Œµ) œÉ)
        ‚Üí Œº ()
stdMainT n desc p io =
  stdMain_ n desc p (\ o ‚Üí runReaderT (io (o ‚ä£ options)) (o ‚ä£ dryRunLevel))

----------

{- | Like StdMainT, but logs to `MockIOClass`. -}
stdMainT' ‚à∑ ‚àÄ Œµ œÅ œÉ ŒΩ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ) ‚áí
          Natty ŒΩ
        ‚Üí ùïã
        ‚Üí Parser œÅ
        ‚Üí (œÅ ‚Üí ReaderT (DryRunLevel ŒΩ) (LogTIO MockIOClass Œµ) œÉ)
        ‚Üí Œº ()
stdMainT' = stdMainT

----------

{- | Version of `stdMain`, with more simple type; where the error is
     specifically a `UsageIOError`, and there is a single dry-run level which is
     translated to DoMock/NoMock; intended for simple IO programs.
 -}
stdMainSimple ‚à∑ ‚àÄ œÅ œÉ Œº . (MonadIO Œº, ToExitCode œÉ) ‚áí
                ùïã
              ‚Üí Parser œÅ
              ‚Üí (DoMock ‚Üí œÅ ‚Üí (LogTIO MockIOClass UsageIOError) œÉ)
              ‚Üí Œº ()
stdMainSimple desc parser io =
  let go opts = do
        mock ‚Üê ifDryRun DoMock NoMock
        lift $ io mock opts
   in stdMainT one desc parser go

----------------------------------------

{- | `stdMain` with `œâ` fixed to `MockIOClass` (i.e., logging with
     MockIOClass). -}
stdMain' ‚à∑ ‚àÄ Œµ œÅ œÉ ŒΩ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ) ‚áí
          Natty ŒΩ
        ‚Üí ùïã
        ‚Üí Parser œÅ
        ‚Üí (DryRunLevel ŒΩ ‚Üí œÅ ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) œÉ)
        ‚Üí Œº ()
stdMain' = stdMain

--------------------

{- | Like `stdMain'`, but with `DryRun` option. -}

stdMainNoDR' ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
              (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
               HasCallstack Œµ, ToExitCode œÉ) ‚áí
              ùïã
            ‚Üí Parser œÅ
            ‚Üí (œÅ ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) œÉ)
            ‚Üí Œº ()

stdMainNoDR' desc p io =
  stdMain_ none desc p (\ o ‚Üí io (o ‚ä£ options))

----------------------------------------

{- | `stdMain'` with `ŒΩ` fixed to `one` (i.e., a single dry-run level). -}
stdMain'' ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ) ‚áí
          ùïã
        ‚Üí Parser œÅ
        ‚Üí (DryRunLevel One ‚Üí œÅ ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) œÉ)
        ‚Üí Œº ()
stdMain'' = stdMain' one

-- that's all, folks! ----------------------------------------------------------
