module StdMain
  ( LogTIO, lvlToDoMock, stdMain, stdMain_, stdMainSimple, stdMainNoDR
  -- DEPRECATED
  , stdMainNoDR', stdMain''
  )
where

-- base --------------------------------

import Control.Applicative  ( pure )
import Control.Exception    ( Exception )
import Data.Bifunctor       ( first )
import Data.Function        ( ($) )
import Data.Ord             ( (<) )
import Data.String          ( unwords, words )
import Data.Tuple           ( uncurry )
import System.IO            ( IO )
import Text.Show            ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â°) )
import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )
import Data.Ord.Unicode       ( (‚â§) )
import GHC.Stack              ( HasCallStack )

-- data-textual ------------------------

import Data.Textual  ( Printable, toString, toText )

-- exited ------------------------------

import qualified  Exited
import Exited  ( ToExitCode )

-- has-callstack -----------------------

import HasCallstack  ( HasCallstack )

-- log-plus ----------------------------

import Log              ( Log
                        , logToFile', logFilter, logToStderr', stdRenderers )
import Log.LogEntry     ( LogEntry, attrs, mapPrefixDoc )
import Log.HasSeverity  ( severity )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT )

-- mockio ------------------------------

import MockIO               ( DoMock( DoMock, NoMock ), HasDoMock )

-- mockio-log --------------------------

import MockIO.Log           ( MockIOClass )
import MockIO.IOClass       ( HasIOClass, (‚àà), ioClass )
import MockIO.RenderDoMock  ( renderWithDoMock )

-- monaderror-io -----------------------

import MonadError           ( —• )
import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import MonadIO       ( MonadIO, liftIO )
import MonadIO.Base  ( getArgs )
import MonadIO.File  ( FileOpenMode( FileW ), HEncoding( UTF8 )
                     , fileWritable, withFile )

-- more-unicode ------------------------

import Data.MoreUnicode.Applicative  ( (‚ä¥) )
import Data.MoreUnicode.Either       ( pattern ùï∑, pattern ùïΩ )
import Data.MoreUnicode.Functor      ( (‚ä≥) )
import Data.MoreUnicode.Lens         ( (‚ä£) )
import Data.MoreUnicode.Maybe        ( pattern ùïµ, pattern ùïπ )
import Data.MoreUnicode.Monad        ( (‚â´) )
import Data.MoreUnicode.Monoid       ( —é )
import Data.MoreUnicode.String       ( ùïä )
import Data.MoreUnicode.Text         ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, throwError )

-- natural-plus ------------------------

import Natural  ( Natty, One, none, one, count )

-- optparse-applicative ----------------

import Options.Applicative  ( Parser, footerDoc, helper, progDesc )
import Options.Applicative.Help.Pretty  ( Doc
                                        , (<+>)
                                        , align, empty, fillBreak, fillSep
                                        , indent, string, text
                                        , vcat
                                        )

-- optparse-plus -----------------------

import OptParsePlus  ( parseOpts_ )

-- prettyprinter -----------------------

import qualified Data.Text.Prettyprint.Doc  as  PPDoc

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import StdMain.StdOptions      ( DryRunLevel, HasDryRunLevel( dryRunLevel )
                               , StdOptions
                               , callstackOnError, dryRunNum, options
                               , parseStdOptions, profCallstackOnError
                               )
import StdMain.UsageError      ( AsUsageError, UsageIOError, throwUsage )
import StdMain.VerboseOptions  ( ShowIOCs( DoShowIOCs )
                               , csopt, ioClassFilter, logFile, showIOCs
                               , unLogFile, verboseDesc, verboseOptions
                               )

--------------------------------------------------------------------------------

type LogTIO œâ Œµ = LoggingT (Log œâ) (ExceptT Œµ IO)
type LogTIOM Œµ  = LoggingT (Log MockIOClass) (ExceptT Œµ IO)

------------------------------------------------------------

{- | Disentangle dry-run level, options from a `StdOptions`. -}
drOpts ‚à∑ StdOptions ŒΩ œÅ ‚Üí (DryRunLevel ŒΩ, œÅ)
drOpts o = (o ‚ä£ dryRunLevel, o ‚ä£ options)

----------------------------------------

{- | Execute some logging IO, which has access to a dry-run level (parsed
     from arguments).  A parser is used to parse those arguments from input. -}
stdMain_ ‚à∑ ‚àÄ Œµ œÅ œÉ œâ ŒΩ Œº .
           (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
            HasCallstack Œµ, ToExitCode œÉ, HasIOClass œâ, HasDoMock œâ,
            HasCallStack) ‚áí
           Natty ŒΩ                         -- ^ maximum `DryRun` level
         ‚Üí ùïã                               -- ^ program synopsis
         ‚Üí Parser œÅ                        -- ^ options parser
         ‚Üí (StdOptions ŒΩ œÅ ‚Üí LogTIO œâ Œµ œÉ) -- ^ program
         ‚Üí [ùïä]                             -- ^ args to parse (e.g., cmdline)
         ‚Üí Œº ()
stdMain_ n desc p io args = do
  let optionDesc ‚à∑ ùïä ‚Üí [ùïä] ‚Üí Doc
      optionDesc name descn =
        let para = fillSep $ text ‚ä≥ (words $ unwords descn)
         in indent 2 (fillBreak 14 (string name) <+> align para)
      optionDesc' ‚à∑ ùïä ‚Üí Doc ‚Üí Doc
      optionDesc' name para =
        indent 2 (fillBreak 14 (string name) <+> align para)
      footerDesc ‚à∑ Doc
      footerDesc = vcat ([ empty, string "Standard options:"
                         , optionDesc "-v" [ "Increase verbosity.  This may"
                                           , "be used up to 3 times (which is"
                                           , "equivalent to --debug); and is"
                                           , "exclusive with --quiet,"
                                           , "--debug, and --verbose."
                                           ]

                         , optionDesc "--quiet" [ "Decrease verbosity.  This "
                                                , "may be used up to 4 times;"
                                                , "and is exclusive with -v,"
                                                , "--debug, and --verbose."
                                                ]

                         , optionDesc "--debug" [ "Set verbosity to maximum"
                                                , "(debug level).  This option "
                                                , "is exclusive with -v,"
                                                , "--quiet, and --verbose."
                                                ]
                         ] ‚äï case count n of
                               0 ‚Üí []
                               1 ‚Üí [ optionDesc "--dry-run"
                                                [ "Do not make any changes; "
                                                , "just pretend."
                                                ]
                                   ]
                               _ ‚Üí [ optionDesc "--dry-run"
                                                [ "Do not make any changes; "
                                                , "just pretend.  May be used"
                                                , "up to ", show (count n)
                                                , " times."
                                                ]
                                   ]

                         ‚äï [ optionDesc' "--verbose=OPTS" verboseDesc
                           , optionDesc "--callstack-on-error / -!"
                                                [ "In case of error, show"
                                                , "a callstack of where the"
                                                , "error was created."
                                                ]
                           , optionDesc "--prof-callstack-on-error / -#"
                                                [ "In case of error, show"
                                                , "a profiler-generated"
                                                , "callstack of where the error"
                                                , "was created if one is"
                                                , "available."
                                                ]
                           ]
                        )
  o ‚Üê parseOpts_ args (progDesc (toString desc) ‚äï footerDoc (ùïµ footerDesc))
                (parseStdOptions n p ‚ä¥ helper)
  let vopts      = o ‚ä£ verboseOptions
      ioClasses  = vopts ‚ä£ ioClassFilter
      sevOpt     = o ‚ä£ severity
      renderers  = renderWithDoMock : stdRenderers (vopts ‚ä£ csopt)

      prefixIOC ‚à∑ ‚àÄ Œ± Œ≤ . HasIOClass Œ± ‚áí LogEntry Œ± ‚Üí PPDoc.Doc Œ≤
      prefixIOC le =
        PPDoc.braces (PPDoc.pretty ‚àò toText $ le ‚ä£ attrs‚àòioClass) ‚äï PPDoc.space
      filters    = —é [ if vopts ‚ä£ showIOCs ‚â° DoShowIOCs
                       then [ pure ‚àò mapPrefixDoc prefixIOC ]
                       else []
                     , [ \ le ‚Üí if le ‚ä£ severity ‚â§ sevOpt then [le] else []
                       , logFilter (\ le ‚Üí (le ‚ä£ attrs ‚àò ioClass) ‚àà ioClasses)
                       ]
                     ]
      logIOToFile i o' h = logToFile' renderers filters h (i o')


  Exited.doMainCS (o ‚ä£ callstackOnError, o ‚ä£ profCallstackOnError) $
    case vopts ‚ä£ logFile of
      ùïπ       ‚Üí logToStderr' renderers filters (io o)
      ùïµ logfn ‚Üí —• (fileWritable (unLogFile logfn)) ‚â´ \ case
                  ùï∑ e     ‚Üí throwError e
                  ùïΩ (ùïµ e) ‚Üí throwUsage $ "bad log file: " ‚äï e
                  ùïΩ ùïπ     ‚Üí withFile UTF8 (FileW $ ùïµ 0640)
                                          (unLogFile logfn) (logIOToFile io o)

----------------------------------------

lvlToDoMock ‚à∑ HasDryRunLevel One ŒΩ ‚áí ŒΩ ‚Üí DoMock
lvlToDoMock l = if 0 < dryRunNum l then DoMock else NoMock

{- | `stdMain_`  with `œâ` fixed to `MockIOClass` (i.e., logging with
     MockIOClass), `ŒΩ` fixed to `one` (i.e., a single dry-run level); and that
     dry-run level is translated to a `DoMock`.
 -}
stdMain ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ) ‚áí
          ùïã                          -- ^ program description
        ‚Üí Parser œÅ                   -- ^ options parser
        ‚Üí (DoMock ‚Üí œÅ ‚Üí LogTIOM Œµ œÉ) -- ^ main program
        ‚Üí [ùïä]                        -- ^ arguments to parse
        ‚Üí Œº ()
stdMain desc p io =
  stdMain_ one desc p (\ o ‚Üí uncurry io (first lvlToDoMock $ drOpts o))

----------------------------------------

{- | Version of `stdMain`, with more simple type; the args are taken directly
     from the cmdline; where the error is specifically a `UsageIOError`, and
     there is a single dry-run level which is translated to DoMock/NoMock;
     intended for simple IO programs.
 -}
stdMainSimple ‚à∑ ‚àÄ œÅ œÉ Œº . (MonadIO Œº, ToExitCode œÉ) ‚áí
                ùïã
              ‚Üí Parser œÅ
              ‚Üí (DoMock ‚Üí œÅ ‚Üí (LogTIOM UsageIOError) œÉ)
              ‚Üí Œº ()
stdMainSimple desc parser io = getArgs ‚â´ stdMain desc parser io

----------------------------------------

{- | Like `stdMain`, but with no `DryRun` option and `œâ` fixed to
     `MockIOClass`. -}
stdMainNoDR ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
              (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
               HasCallstack Œµ, ToExitCode œÉ) ‚áí
              ùïã
            ‚Üí Parser œÅ
            ‚Üí (œÅ ‚Üí LogTIOM Œµ œÉ)
            ‚Üí [ùïä]
            ‚Üí Œº ()
stdMainNoDR desc p io = stdMain_ none desc p (\ o ‚Üí io (o ‚ä£ options))

-- deprecated functions ------------------------------------

{- | `stdMain_` with `œâ` fixed to `MockIOClass` (i.e., logging with
      MockIOClass) and `ŒΩ` fixed to `one` (i.e., a single dry-run level). -}
stdMain'' ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ) ‚áí
          ùïã
        ‚Üí Parser œÅ
        ‚Üí (DryRunLevel One ‚Üí œÅ ‚Üí LogTIOM Œµ œÉ)
        ‚Üí Œº ()
{-# DEPRECATED stdMain'' "use getArgs ‚â´ stdMain" #-}
stdMain'' desc parser io =
  liftIO getArgs ‚â´ stdMain_ one desc parser (\ o ‚Üí uncurry io (drOpts o))

--------------------

stdMainNoDR' ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
              (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
               HasCallstack Œµ, ToExitCode œÉ) ‚áí
              ùïã
            ‚Üí Parser œÅ
            ‚Üí (œÅ ‚Üí LogTIOM Œµ œÉ)
            ‚Üí Œº ()
{-# DEPRECATED stdMainNoDR' "use getArgs ‚â´ stdMainNoDR" #-}
stdMainNoDR' desc parser io = getArgs ‚â´ stdMainNoDR desc parser io

-- that's all, folks! ----------------------------------------------------------
