module StdMain
  ( LogTIO, Overwrite(..)
  , lvlToDoMock, stdMain, stdMain_, stdMainSimple, stdMainNoDR
  , checkDirW, checkExtantsDups, checkFileW, checkFileWs, checkMkdirs
  , checkOutputFiles, checkRunNICmds, checkRunNICmds', runNICmds
  , throwUsageErrors

  -- DEPRECATED
  , stdMainNoDR', stdMain''
  )
where

-- base --------------------------------

import Control.Applicative  ( pure )
import Control.Exception    ( Exception )
import Control.Monad        ( foldM, forM, forM_, mapM, return, when )
import Data.Bifunctor       ( first )
import Data.Eq              ( Eq )
import Data.Foldable        ( Foldable )
import Data.Function        ( ($) )
import Data.Maybe           ( catMaybes )
import Data.Ord             ( (<) )
import Data.String          ( unwords, words )
import Data.Tuple           ( fst, uncurry )
import System.IO            ( IO )
import Text.Show            ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â°) )
import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )
import Data.Ord.Unicode       ( (‚â§) )
import GHC.Stack              ( HasCallStack )

-- containers-plus ---------------------

import ContainersPlus.Member  ( HasMember( (‚àà) ) )

-- data-default ------------------------

import Data.Default  ( Default( def ) )

-- data-textual ------------------------

import Data.Textual  ( Printable, toString, toText )

-- exited ------------------------------

import qualified  Exited
import Exited  ( ToExitCode )

-- fpath -------------------------------

import FPath.AbsDir            ( AbsDir )
import FPath.AbsFile           ( AbsFile )
import FPath.Dirname           ( dirname )
import FPath.Error.FPathError  ( AsFPathError )

-- has-callstack -----------------------

import HasCallstack  ( HasCallstack )

-- lens --------------------------------

import Control.Lens.Getter  ( view )

-- log-plus ----------------------------

import Log              ( Log
                        , logToFile', logFilter, logToStderr', stdRenderers )
import Log.LogEntry     ( LogEntry, attrs, mapPrefixDoc )
import Log.HasSeverity  ( severity )

-- logging-effect ----------------------

import Control.Monad.Log  ( LoggingT, MonadLog
                          , Severity( Informational, Notice, Warning ) )

-- mockio ------------------------------

import MockIO               ( DoMock( DoMock, NoMock ), HasDoMock )

-- mockio-log --------------------------

import MockIO.Log           ( MockIOClass, errIO', mkIOL )
import MockIO.IOClass       ( HasIOClass, ioClass )
import MockIO.RenderDoMock  ( renderWithDoMock )

-- mockio-plus -------------------------

import MockIO.Directory  ( mkdir )
import MockIO.File       ( AccessMode( ACCESS_W, ACCESS_WX )
                         , FExists( FExists, NoFExists )
                         , access, fexists, fexists', lfexists', stat
                         )
import MockIO.Process    ( (!) )
import MockIO.Process.MLCmdSpec
                         ( MLCmdSpec )

-- monaderror-io -----------------------

import MonadError           ( —• )
import MonadError.IO.Error  ( AsIOError )

-- monadio-plus ------------------------

import MonadIO       ( MonadIO, liftIO )
import MonadIO.Base  ( getArgs )
import MonadIO.Error.CreateProcError
                     ( AsCreateProcError )
import MonadIO.Error.ProcExitError
                     ( AsProcExitError )
import MonadIO.File  ( FileOpenMode( FileW ), FileType( Directory )
                     , HEncoding( UTF8 )
                     , devnull, fileWritable, ftype, withFile
                     )
import MonadIO.NamedHandle
                     ( handle )
import MonadIO.Process.ExitStatus
                     ( ExitStatus )
import MonadIO.Process.OutputHandles
                     ( OutputHandles )
import MonadIO.Process.MakeProc
                     ( MakeProc )
import MonadIO.Process.ToMaybeTexts
                     ( ToMaybeTexts )

-- more-unicode ------------------------

import Data.MoreUnicode.Applicative  ( (‚ä¥) )
import Data.MoreUnicode.Bool         ( pattern ùïø, pattern ùï± )
import Data.MoreUnicode.Either       ( pattern ùï∑, pattern ùïΩ )
import Data.MoreUnicode.Functor      ( (‚©∫), (‚ä≥) )
import Data.MoreUnicode.Lens         ( (‚ä£) )
import Data.MoreUnicode.Maybe        ( ùïÑ, pattern ùïµ, pattern ùïπ )
import Data.MoreUnicode.Monad        ( (‚â´) )
import Data.MoreUnicode.Monoid       ( —é )
import Data.MoreUnicode.String       ( ùïä )
import Data.MoreUnicode.Text         ( ùïã )

-- mtl ---------------------------------

import Control.Monad.Except  ( ExceptT, MonadError, throwError )

-- natural-plus ------------------------

import Natural  ( Natty, One, none, one, count )

-- optparse-applicative ----------------

import Options.Applicative  ( Parser, footerDoc, helper, progDesc )
import Options.Applicative.Help.Pretty  ( Doc
                                        , (<+>)
                                        , align, empty, fillBreak, fillSep
                                        , indent, string, text
                                        , vcat
                                        )

-- optparse-plus -----------------------

import OptParsePlus  ( parseOpts_ )

-- prettyprinter -----------------------

import qualified Data.Text.Prettyprint.Doc  as  PPDoc

-- tfmt --------------------------------

import Text.Fmt  ( fmt, fmtT )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import StdMain.StdOptions      ( DryRunLevel, HasDryRunLevel( dryRunLevel )
                               , StdOptions
                               , callstackOnError, dryRunNum, options
                               , parseStdOptions, profCallstackOnError
                               )
import StdMain.UsageError      ( AsUsageError, UsageFPProcIOError, throwUsage )
import StdMain.VerboseOptions  ( ShowIOCs( DoShowIOCs )
                               , csopt, ioClassFilter, logFile, showIOCs
                               , unLogFile, verboseDesc, verboseOptions
                               )

--------------------------------------------------------------------------------

data Overwrite = Overwrite | NoOverwrite
  deriving (Eq,Show)

------------------------------------------------------------

type LogTIO œâ Œµ = LoggingT (Log œâ) (ExceptT Œµ IO)
-- type LogTIOM Œµ  = LoggingT (Log MockIOClass) (ExceptT Œµ IO)
type LogTIOM Œµ  = LogTIO MockIOClass Œµ

------------------------------------------------------------

{- | Disentangle dry-run level, options from a `StdOptions`. -}
drOpts ‚à∑ StdOptions ŒΩ œÅ ‚Üí (DryRunLevel ŒΩ, œÅ)
drOpts o = (o ‚ä£ dryRunLevel, o ‚ä£ options)

----------------------------------------

{- | Execute some logging IO, which has access to a dry-run level (parsed
     from arguments).  A parser is used to parse those arguments from input. -}
stdMain_ ‚à∑ ‚àÄ Œµ œÅ œÉ œâ ŒΩ Œº .
           (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
            HasCallstack Œµ, ToExitCode œÉ, HasIOClass œâ, HasDoMock œâ,
            HasCallStack) ‚áí
           Natty ŒΩ                         -- ^ maximum `DryRun` level
         ‚Üí ùïã                               -- ^ program synopsis
         ‚Üí Parser œÅ                        -- ^ options parser
         ‚Üí (StdOptions ŒΩ œÅ ‚Üí LogTIO œâ Œµ œÉ) -- ^ program
         ‚Üí [ùïä]                             -- ^ args to parse (e.g., cmdline)
         ‚Üí Œº ()
stdMain_ n desc p io args = do
  let optionDesc ‚à∑ ùïä ‚Üí [ùïä] ‚Üí Doc
      optionDesc name descn =
        let para = fillSep $ text ‚ä≥ (words $ unwords descn)
         in indent 2 (fillBreak 14 (string name) <+> align para)
      optionDesc' ‚à∑ ùïä ‚Üí Doc ‚Üí Doc
      optionDesc' name para =
        indent 2 (fillBreak 14 (string name) <+> align para)
      footerDesc ‚à∑ Doc
      footerDesc = vcat ([ empty, string "Standard options:"
                         , optionDesc "-v" [ "Increase verbosity.  This may"
                                           , "be used up to 3 times (which is"
                                           , "equivalent to --debug); and is"
                                           , "exclusive with --quiet,"
                                           , "--debug, and --verbose."
                                           ]

                         , optionDesc "--quiet" [ "Decrease verbosity.  This "
                                                , "may be used up to 4 times;"
                                                , "and is exclusive with -v,"
                                                , "--debug, and --verbose."
                                                ]

                         , optionDesc "--debug" [ "Set verbosity to maximum"
                                                , "(debug level).  This option "
                                                , "is exclusive with -v,"
                                                , "--quiet, and --verbose."
                                                ]
                         ] ‚äï case count n of
                               0 ‚Üí []
                               1 ‚Üí [ optionDesc "--dry-run"
                                                [ "Do not make any changes; "
                                                , "just pretend."
                                                ]
                                   ]
                               _ ‚Üí [ optionDesc "--dry-run"
                                                [ "Do not make any changes; "
                                                , "just pretend.  May be used"
                                                , "up to ", show (count n)
                                                , " times."
                                                ]
                                   ]

                         ‚äï [ optionDesc' "--verbose=OPTS" verboseDesc
                           , optionDesc "--callstack-on-error / -!"
                                                [ "In case of error, show"
                                                , "a callstack of where the"
                                                , "error was created."
                                                ]
                           , optionDesc "--prof-callstack-on-error / -#"
                                                [ "In case of error, show"
                                                , "a profiler-generated"
                                                , "callstack of where the error"
                                                , "was created if one is"
                                                , "available."
                                                ]
                           ]
                        )
  o ‚Üê parseOpts_ args (progDesc (toString desc) ‚äï footerDoc (ùïµ footerDesc))
                (parseStdOptions n p ‚ä¥ helper)
  let vopts      = o ‚ä£ verboseOptions
      ioClasses  = vopts ‚ä£ ioClassFilter
      sevOpt     = o ‚ä£ severity
      renderers  = renderWithDoMock : stdRenderers (vopts ‚ä£ csopt)

      prefixIOC ‚à∑ ‚àÄ Œ± Œ≤ . HasIOClass Œ± ‚áí LogEntry Œ± ‚Üí PPDoc.Doc Œ≤
      prefixIOC le =
        PPDoc.braces (PPDoc.pretty ‚àò toText $ le ‚ä£ attrs‚àòioClass) ‚äï PPDoc.space
      filters    = —é [ if vopts ‚ä£ showIOCs ‚â° DoShowIOCs
                       then [ pure ‚àò mapPrefixDoc prefixIOC ]
                       else []
                     , [ \ le ‚Üí if le ‚ä£ severity ‚â§ sevOpt then [le] else []
                       , logFilter (\ le ‚Üí (le ‚ä£ attrs ‚àò ioClass) ‚àà ioClasses)
                       ]
                     ]
      logIOToFile i o' h = logToFile' renderers filters h (i o')


  Exited.doMainCS (o ‚ä£ callstackOnError, o ‚ä£ profCallstackOnError) $
    case vopts ‚ä£ logFile of
      ùïπ       ‚Üí logToStderr' renderers filters (io o)
      ùïµ logfn ‚Üí —• (fileWritable (unLogFile logfn)) ‚â´ \ case
                  ùï∑ e     ‚Üí throwError e
                  ùïΩ (ùïµ e) ‚Üí throwUsage $ "bad log file: " ‚äï e
                  ùïΩ ùïπ     ‚Üí withFile UTF8 (FileW $ ùïµ 0640)
                                          (unLogFile logfn) (logIOToFile io o ‚àò view handle)

----------------------------------------

lvlToDoMock ‚à∑ HasDryRunLevel One ŒΩ ‚áí ŒΩ ‚Üí DoMock
lvlToDoMock l = if 0 < dryRunNum l then DoMock else NoMock

{- | `stdMain_`  with `œâ` fixed to `MockIOClass` (i.e., logging with
     MockIOClass), `ŒΩ` fixed to `one` (i.e., a single dry-run level); and that
     dry-run level is translated to a `DoMock`.
 -}
stdMain ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ) ‚áí
          ùïã                          -- ^ program description
        ‚Üí Parser œÅ                   -- ^ options parser
        ‚Üí (DoMock ‚Üí œÅ ‚Üí LogTIOM Œµ œÉ) -- ^ main program
        ‚Üí [ùïä]                        -- ^ arguments to parse
        ‚Üí Œº ()
stdMain desc p io =
  stdMain_ one desc p (\ o ‚Üí uncurry io (first lvlToDoMock $ drOpts o))

----------------------------------------

{- | Version of `stdMain`, with more simple type; the args are taken directly
     from the cmdline; where the error is specifically a `UsageIOError`, and
     there is a single dry-run level which is translated to DoMock/NoMock;
     intended for simple IO programs.
 -}
stdMainSimple ‚à∑ ‚àÄ œÅ œÉ Œº . (MonadIO Œº, ToExitCode œÉ) ‚áí
                ùïã
              ‚Üí Parser œÅ
              ‚Üí (DoMock ‚Üí œÅ ‚Üí (LogTIOM UsageFPProcIOError) œÉ)
              ‚Üí Œº ()
stdMainSimple desc parser io = getArgs ‚â´ stdMain desc parser io

----------------------------------------

{- | Like `stdMain`, but with no `DryRun` option and `œâ` fixed to
     `MockIOClass`. -}
stdMainNoDR ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
              (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
               HasCallstack Œµ, ToExitCode œÉ) ‚áí
              ùïã
            ‚Üí Parser œÅ
            ‚Üí (œÅ ‚Üí LogTIOM Œµ œÉ)
            ‚Üí [ùïä]
            ‚Üí Œº ()
stdMainNoDR desc p io = stdMain_ none desc p (\ o ‚Üí io (o ‚ä£ options))

-- deprecated functions ------------------------------------

{- | `stdMain_` with `œâ` fixed to `MockIOClass` (i.e., logging with
      MockIOClass) and `ŒΩ` fixed to `one` (i.e., a single dry-run level). -}
stdMain'' ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
          (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
           HasCallstack Œµ, ToExitCode œÉ) ‚áí
          ùïã
        ‚Üí Parser œÅ
        ‚Üí (DryRunLevel One ‚Üí œÅ ‚Üí LogTIOM Œµ œÉ)
        ‚Üí Œº ()
{-# DEPRECATED stdMain'' "use getArgs ‚â´ stdMain" #-}
stdMain'' desc parser io =
  liftIO getArgs ‚â´ stdMain_ one desc parser (\ o ‚Üí uncurry io (drOpts o))

--------------------

stdMainNoDR' ‚à∑ ‚àÄ Œµ œÅ œÉ Œº .
              (MonadIO Œº, Exception Œµ, Printable Œµ, AsUsageError Œµ, AsIOError Œµ,
               HasCallstack Œµ, ToExitCode œÉ) ‚áí
              ùïã
            ‚Üí Parser œÅ
            ‚Üí (œÅ ‚Üí LogTIOM Œµ œÉ)
            ‚Üí Œº ()
{-# DEPRECATED stdMainNoDR' "use getArgs ‚â´ stdMainNoDR" #-}
stdMainNoDR' desc parser io = getArgs ‚â´ stdMainNoDR desc parser io

----------------------------------------

----------------------------------------

{- | Check if we can write to a dir (which must exist); a list of dirs to treat
     as accessible (e.g., "we're going to create these (or die trying)") may be
     passed.
 -}
checkDirW ‚à∑ (MonadIO Œº, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
             Default œâ, HasIOClass œâ, HasDoMock œâ, MonadLog (Log œâ) Œº) ‚áí
            [AbsDir] ‚Üí AbsDir ‚Üí Œº (ùïÑ ùïã)
checkDirW ds d = do
  let accessE ùïπ     = if d ‚àà ds
                      then return ùïπ
                      else return ‚àò ùïµ $ [fmt|No such dir: '%T'|] d
      accessE (ùïµ ùïø) = stat Informational ùïπ d NoMock ‚â´ \ case
                         ùïπ    ‚Üí return ‚àò ùïµ $ [fmt|dir disappeared: '%T'|] d
                         ùïµ st ‚Üí case ftype st of
                                  Directory ‚Üí return ùïπ
                                  _         ‚Üí
                                    return ‚àò ùïµ $ [fmt|not a dir: '%T'|] d
      accessE (ùïµ ùï±) = return ‚àò ùïµ $ [fmt|Cannot write to dir: '%T'|] d
   in access Informational ACCESS_WX ùïπ d NoMock ‚â´ accessE

----------------------------------------

{- | Check a list of files; for each file check if it is duplicated elsewhere in
     the list; if it is extant and `overwrite` is `NoOverwrite`; or if it is
     extant, `overwrite` is `Overwrite`, but the file is not writable. -}
checkExtantsDups ‚à∑ (MonadIO Œº, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                    MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ, HasDoMock œâ,
                    HasCallStack, Foldable œÜ) ‚áí
                   Overwrite ‚Üí œÜ AbsFile ‚Üí Œº [ùïã]
checkExtantsDups overwrite =
  fst ‚©∫ foldM check_fn ([],[])
  where
    -- Accumulator is text errors, and output files seen so far (for detecting
    -- duplicates).
    check_fn ‚à∑ (MonadIO Œº, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                HasCallStack, MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ,
                HasDoMock œâ) ‚áí
               ([ùïã],[AbsFile]) ‚Üí AbsFile ‚Üí Œº ([ùïã],[AbsFile])
    check_fn (errs,fs) f =
      if f ‚àà fs
      then let msg = [fmt|duplicate output file: '%T'|] f
            in return (msg:errs,fs)
      else -- We use `lfexists'` here so that (a) /etc/passwd/ will return
           -- `FExists` if /etc/passwd exists; and (b) /foo will return
           -- `FExists` if /foo exists and is a symlink (even a dangling one).
           lfexists' Informational FExists f NoMock ‚â´ \ case
             FExists   ‚Üí if Overwrite ‚â° overwrite
                         then access Informational ACCESS_W ùïπ f NoMock ‚â´ \ case
                                ùïπ ‚Üí -- We warn directly, rather than returning
                                    -- an error, because it's a warning and
                                    -- probably shouldn't cause a failure.
                                    do let msg =
                                             —é [ "file disappeared while "
                                               ,  [fmtT|checking: '%T'|] f ]
                                       mkIOL Warning def msg () (return ())
                                             NoMock
                                       return (errs,f:fs)
                                ùïµ ùï± ‚Üí let msg = —é [ "output file is not "
                                                  , [fmt|writable: '%T'|] f ]
                                       in return (msg:errs,f:fs)
                                ùïµ ùïø ‚Üí return (errs,f:fs)
                         else let msg = [fmt|output file already exists: %T|] f
                               in return (msg:errs,f:fs)
             NoFExists ‚Üí return (errs,f:fs)

----------------------------------------

{- | For each dir, check that either the dir exists and is writable or its
     parent exists and is writable (i.e., the dir could be created).  A list of
     errors is returned.
 -}
checkMkdirs ‚à∑ ‚àÄ Œµ œâ Œº .
              (MonadIO Œº, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
               HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
              [AbsDir] ‚Üí Œº [ùïã]
checkMkdirs dirs =
  let go d = access Informational ACCESS_WX ùïπ d NoMock ‚â´ \ case
               ùïµ ùïø ‚Üí return ùïπ
               ùïµ ùï± ‚Üí return ‚àò ùïµ $ [fmt|'%T' is not writable|] d
               ùïπ   ‚Üí do
                 let p = d ‚ä£ dirname
                 access Informational ACCESS_WX ùïπ p NoMock ‚â´ \ case
                   ùïπ ‚Üí return ‚àò ùïµ $ [fmt|neither '%T' nor '%T' exist|] d p
                   ùïµ ùïø ‚Üí return ùïπ
                   ùïµ ùï± ‚Üí return ‚àò ùïµ $ [fmt|no '%T', and %T is not writable|] d p
   in catMaybes ‚ä≥ forM dirs go

----------------------------------------

{- | Check for the writability of a file; specifically, the file must either
     exist, the overwrite flag be Overwrite, and the file be writable; or else
     the file not exist, and its parent directory either exist and be writable
     or else be cited in `make_dirs`.
 -}
checkFileW ‚à∑ ‚àÄ Œµ œâ Œº .
             (MonadIO Œº, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
              HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
             [AbsDir] ‚Üí Overwrite ‚Üí AbsFile ‚Üí Œº (ùïÑ ùïã)
checkFileW make_dirs overwrite fn = do
  fexists Informational NoFExists fn NoMock ‚â´ \ case
    FExists   ‚Üí
      case overwrite of
        NoOverwrite ‚Üí return ‚àò ùïµ $ [fmtT|Not overwriting extant file '%T'|] fn
        Overwrite   ‚Üí access Informational ACCESS_W (ùïµ ùïø) fn NoMock ‚â´ \ case
                        ùïπ   ‚Üí return ‚àò ùïµ $ [fmtT|File '%T' disappeared|] fn
                        ùïµ ùïø ‚Üí return ùïπ
                        ùïµ ùï± ‚Üí return ‚àò ùïµ $ [fmt|File '%T' is not writable|] fn
    NoFExists ‚Üí let d = fn ‚ä£ dirname
                    pfx = (([fmt|Cannot output '%T': |] fn ‚äï) ‚ä≥)
                 in checkDirW make_dirs d ‚â´ return ‚àò pfx

--------------------

checkFileWs ‚à∑ ‚àÄ Œµ œâ Œº .
              (MonadIO Œº, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
               HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
              [AbsDir] ‚Üí Overwrite ‚Üí [AbsFile] ‚Üí Œº [ùïã]
checkFileWs make_dirs overwrite fns =
   catMaybes ‚ä≥ mapM (checkFileW make_dirs overwrite) fns

----------------------------------------

{- | Given a list of error messages; if the list is non-empty, emit each msg
     and die with a given usage error. -}

throwUsageErrors ‚à∑ ‚àÄ Œµ Œº .
                   (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                    AsUsageError Œµ, MonadError Œµ Œº) ‚áí
                   DoMock ‚Üí ùïã ‚Üí [ùïã] ‚Üí Œº ()
throwUsageErrors _        _  []   = return ()
throwUsageErrors do_mock msg errs = do
    forM_ errs errIO'
    when (NoMock ‚â° do_mock) $ throwUsage msg

----------------------------------------

{- | Check that a list of files contains no duplicates, and no extant files.

     Each of `fns` is checked for writability.
     -) If `overwrite` is `NoOverwrite`, then each `fns` must not exist but be a
        (potential) member of a writable directory, or an element of
        `make_dirs`.
     -) If `overwrite` is `Overwrite`, then a member of `fns` may exist but must
        itself be writable.
     -) Elements of `fns` may not be duplicated.

     Each of `make_dirs` is checked that either it or its parent exists and is
     writable.
-}
checkOutputFiles ‚à∑ (MonadIO Œº, MonadLog (Log MockIOClass) Œº,
                    AsIOError Œµ, AsUsageError Œµ, Printable Œµ, MonadError Œµ Œº) ‚áí
                   [AbsFile] ‚Üí [AbsDir] ‚Üí Overwrite ‚Üí Œº [ùïã]
checkOutputFiles fns make_dirs overwrite = do
  access_errs ‚Üê checkFileWs make_dirs overwrite fns
  mkdir_errs  ‚Üê checkMkdirs make_dirs
  file_errs   ‚Üê checkExtantsDups overwrite fns

  return $ —é [ access_errs, file_errs, mkdir_errs ]

----------------------------------------

{- | Run a list of external processes that take nothing on stdin. -}
runNICmds ‚à∑ ‚àÄ Œµ Œ∂ Œæ Œº .
            (MonadIO Œº,
             AsProcExitError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
             AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
             HasCallStack, ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂,
             MonadLog (Log MockIOClass) Œº) ‚áí
            [DoMock ‚Üí MLCmdSpec Œæ] ‚Üí DoMock ‚Üí Œº [(ExitStatus,Œæ)]

runNICmds cmds do_mock =
  forM cmds (\ cmd ‚Üí devnull ‚â´ \ null ‚Üí null ! (cmd do_mock))

----------------------------------------

{- | Run a list of external processes that take nothing on stdin; checking
     outputs before execution.  See `checkOutputFiles` for checks made.
     Non-extant elements of `make_dirs` will be created (mode 0755).
 -}
checkRunNICmds ‚à∑ ‚àÄ Œµ Œ∂ Œæ Œº .
                 (MonadIO Œº,
                  AsProcExitError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                  AsUsageError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                  HasCallStack, ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂,
                  MonadLog (Log MockIOClass) Œº) ‚áí
                 Overwrite ‚Üí [DoMock ‚Üí MLCmdSpec Œæ] ‚Üí [AbsFile] ‚Üí [AbsDir]
               ‚Üí DoMock ‚Üí Œº [(ExitStatus,Œæ)]
checkRunNICmds overwrite cmds output_files make_dirs do_mock = do
  errs ‚Üê checkOutputFiles output_files make_dirs overwrite
  throwUsageErrors do_mock "file create error" errs
  let maybeMkdir d = do
        ex ‚Üê fexists' Informational NoFExists d NoMock
        when (NoFExists ‚â° ex) $ mkdir Notice d 0755 do_mock
  forM_ make_dirs maybeMkdir
  runNICmds cmds do_mock

--------------------

{- | Like `checkRunNICmds`, but all output & exit statuses are discarded. -}
checkRunNICmds' ‚à∑ ‚àÄ Œµ Œ∂ Œæ Œº .
                 (MonadIO Œº,
                  AsProcExitError Œµ, AsFPathError Œµ, AsCreateProcError Œµ,
                  AsUsageError Œµ, AsIOError Œµ, Printable Œµ, MonadError Œµ Œº,
                  HasCallStack, ToMaybeTexts Œæ, OutputHandles Œ∂ Œæ, MakeProc Œ∂,
                  MonadLog (Log MockIOClass) Œº) ‚áí
                 Overwrite ‚Üí [DoMock ‚Üí MLCmdSpec Œæ] ‚Üí [AbsFile] ‚Üí [AbsDir]
               ‚Üí DoMock ‚Üí Œº ()
checkRunNICmds' overwrite cmds output_files make_dirs do_mock = do
  _  ‚Üê checkRunNICmds overwrite cmds output_files make_dirs do_mock
  return ()

-- that's all, folks! ----------------------------------------------------------
