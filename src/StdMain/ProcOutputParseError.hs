{-# LANGUAGE DeriveAnyClass     #-}
{-# LANGUAGE DerivingStrategies #-}

module StdMain.ProcOutputParseError
  ( AsProcOutputParseError(..), AsTextError(..)
  , ProcOPError, ProcOutputParseError, ScriptError, TextError
  , UsageParseFPProcIOOPError
  , asProcOutputParseError, asTextError, eCatchProcOPE
  , throwAsProcOutputParseError, throwAsTextError, throwToTextError, “©, “©“©
  )
where

import Base1T

-- base --------------------------------

import GHC.Generics  ( Generic )

-- deepseq -----------------------------

import Control.DeepSeq  ( NFData )

-- fpath -------------------------------

import FPath.Error.FPathError  ( AsFPathError( _FPathError ) )

-- monaderror-io -----------------------

import MonadError  ( eitherME )

-- monadio-plus ------------------------

import MonadIO.Error.CreateProcError  ( AsCreateProcError( _CreateProcError )
                                      , ProcError )
import MonadIO.Error.ProcExitError    ( AsProcExitError( _ProcExitError ) )

-- text-printer ------------------------

import qualified  Text.Printer  as  P

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import StdMain.UsageError  ( AsUsageError( _UsageError ),
                             UsageParseFPProcIOError )

--------------------------------------------------------------------------------

{- | Error whilst parsing process output (e.g., output from df, or‚Ä¶) -}
newtype ProcOutputParseError = ProcOutputParseError (ùïã, CallStack)
  deriving Generic
  deriving anyclass NFData

instance Exception ProcOutputParseError

instance Show ProcOutputParseError where
  show (ProcOutputParseError (t,_)) = show t

instance Eq ProcOutputParseError where
  ProcOutputParseError (t,_) == ProcOutputParseError (t',_) = t == t'

instance HasCallstack ProcOutputParseError where
  callstack = lens (\ (ProcOutputParseError (_,cs)) ‚Üí cs)
                   (\ (ProcOutputParseError (t,_)) cs ‚Üí
                       ProcOutputParseError (t,cs))

instance Printable ProcOutputParseError where
  print (ProcOutputParseError (t,_)) = P.text $ "ProcOutputParseError: " ‚äï t

------------------------------------------------------------

{- | An error that might be of type `ProcOutputParseError` -}
class AsProcOutputParseError Œµ where
  _ProcOutputParseError ‚à∑ Prism' Œµ ProcOutputParseError

instance AsProcOutputParseError ProcOutputParseError where
  _ProcOutputParseError = id

asProcOutputParseError ‚à∑ (AsProcOutputParseError Œµ, HasCallStack, Printable œÅ) ‚áí
                         œÅ ‚Üí Œµ
asProcOutputParseError t =
  _ProcOutputParseError # ProcOutputParseError (toText t,callStack)

throwAsProcOutputParseError ‚à∑ ‚àÄ Œµ œÅ Œ± Œ∑ .
                              (AsProcOutputParseError Œµ, MonadError Œµ Œ∑,
                               HasCallStack, Printable œÅ) ‚áí
                              œÅ ‚Üí Œ∑ Œ±
throwAsProcOutputParseError t =
  throwError $ _ProcOutputParseError # ProcOutputParseError (toText t,callStack)

------------------------------------------------------------

{- | A concrete process error, possibly including `ProcOutputParseError` -}
data ProcOPError = POPE_PROC_ERROR         ProcError
                 | POPE_OUTPUT_PARSE_ERROR ProcOutputParseError
  deriving (Eq,Generic,NFData,Show)

_POPE_PROC_ERROR ‚à∑ Prism' ProcOPError ProcError
_POPE_PROC_ERROR = prism' (\ e ‚Üí POPE_PROC_ERROR e)
                          (\ case POPE_PROC_ERROR e ‚Üí ùïµ e; _ ‚Üí ùïπ)

_POPE_OUTPUT_PARSE_ERROR ‚à∑ Prism' ProcOPError ProcOutputParseError
_POPE_OUTPUT_PARSE_ERROR = prism' (\ e ‚Üí POPE_OUTPUT_PARSE_ERROR e)
                                  (\ case POPE_OUTPUT_PARSE_ERROR e ‚Üí ùïµ e; _ ‚Üíùïπ)

instance Exception ProcOPError

instance HasCallstack ProcOPError where
  callstack =
    lens (\ case (POPE_PROC_ERROR   popepe) ‚Üí popepe ‚ä£ callstack
                 (POPE_OUTPUT_PARSE_ERROR popeope)   ‚Üí popeope   ‚ä£ callstack)
         (\ pe cs ‚Üí case pe of
                      (POPE_PROC_ERROR popepe) ‚Üí
                        POPE_PROC_ERROR $ popepe & callstack ‚ä¢ cs
                      (POPE_OUTPUT_PARSE_ERROR popeope) ‚Üí
                        POPE_OUTPUT_PARSE_ERROR $ popeope & callstack ‚ä¢ cs
         )

instance AsCreateProcError ProcOPError where
 _CreateProcError = _POPE_PROC_ERROR ‚àò _CreateProcError

instance AsIOError ProcOPError where
  _IOError = _POPE_PROC_ERROR ‚àò _IOError

instance AsFPathError ProcOPError where
  _FPathError = _POPE_PROC_ERROR ‚àò _FPathError

instance AsProcExitError ProcOPError where
  _ProcExitError = _POPE_PROC_ERROR ‚àò _ProcExitError

instance Printable ProcOPError where
  print (POPE_PROC_ERROR       pexe) = print pexe
  print (POPE_OUTPUT_PARSE_ERROR popeope)  = print popeope

instance AsProcOutputParseError ProcOPError where
  _ProcOutputParseError = _POPE_OUTPUT_PARSE_ERROR

----------------------------------------

{-| Catch an `Either`, e.g., a MonadThrow or similar, and turn it into a
    `MonadError` of `ProcOutputParseError`.  -}
eCatchProcOPE ‚à∑ ‚àÄ Œµ Œµ' Œ± Œ∑ .
                (MonadError Œµ Œ∑,HasCallStack,AsProcOutputParseError Œµ,Show Œµ') ‚áí
                ùîº Œµ' Œ± ‚Üí Œ∑ Œ±
eCatchProcOPE = eitherME (asProcOutputParseError ‚àò show)

------------------------------------------------------------

{- | A concrete main error, possibly including `ProcOutputParseError` -}
data UsageParseFPProcIOOPError = UPFPIOP_USAGE_ETC_ERROR UsageParseFPProcIOError
                               | UPFPIOP_OUTPUT_ERROR    ProcOutputParseError
  deriving (Eq,Generic,Show)

_UPFPIOP_USAGE_ETC_ERROR ‚à∑ Prism' UsageParseFPProcIOOPError
                                  UsageParseFPProcIOError
_UPFPIOP_USAGE_ETC_ERROR =
  prism' (\ e ‚Üí UPFPIOP_USAGE_ETC_ERROR e)
         (\ case UPFPIOP_USAGE_ETC_ERROR e ‚Üí ùïµ e; _ ‚Üí ùïπ)

_UPFPIOP_OUTPUT_ERROR ‚à∑ Prism' UsageParseFPProcIOOPError ProcOutputParseError
_UPFPIOP_OUTPUT_ERROR = prism' (\ e ‚Üí UPFPIOP_OUTPUT_ERROR e)
                                  (\ case UPFPIOP_OUTPUT_ERROR e ‚Üí ùïµ e; _ ‚Üíùïπ)

instance Exception UsageParseFPProcIOOPError

instance HasCallstack UsageParseFPProcIOOPError where
  callstack =
    lens (\ case (UPFPIOP_USAGE_ETC_ERROR   popepe) ‚Üí popepe ‚ä£ callstack
                 (UPFPIOP_OUTPUT_ERROR popeope)   ‚Üí popeope   ‚ä£ callstack)
         (\ pe cs ‚Üí case pe of
                      (UPFPIOP_USAGE_ETC_ERROR popepe) ‚Üí
                        UPFPIOP_USAGE_ETC_ERROR $ popepe & callstack ‚ä¢ cs
                      (UPFPIOP_OUTPUT_ERROR popeope) ‚Üí
                        UPFPIOP_OUTPUT_ERROR $ popeope & callstack ‚ä¢ cs
         )

instance AsCreateProcError UsageParseFPProcIOOPError where
 _CreateProcError = _UPFPIOP_USAGE_ETC_ERROR ‚àò _CreateProcError

instance AsIOError UsageParseFPProcIOOPError where
  _IOError = _UPFPIOP_USAGE_ETC_ERROR ‚àò _IOError

instance AsFPathError UsageParseFPProcIOOPError where
  _FPathError = _UPFPIOP_USAGE_ETC_ERROR ‚àò _FPathError

instance AsProcExitError UsageParseFPProcIOOPError where
  _ProcExitError = _UPFPIOP_USAGE_ETC_ERROR ‚àò _ProcExitError

instance Printable UsageParseFPProcIOOPError where
  print (UPFPIOP_USAGE_ETC_ERROR       pexe) = print pexe
  print (UPFPIOP_OUTPUT_ERROR popeope)  = print popeope

instance AsProcOutputParseError UsageParseFPProcIOOPError where
  _ProcOutputParseError = _UPFPIOP_OUTPUT_ERROR ‚àò _ProcOutputParseError

instance AsUsageError UsageParseFPProcIOOPError where
  _UsageError  = _UPFPIOP_USAGE_ETC_ERROR ‚àò _UsageError

------------------------------------------------------------

{- | General-purpose text error -}
newtype TextError = TextError (ùïã, CallStack)
  deriving Generic
  deriving anyclass NFData

instance Exception TextError

instance Show TextError where
  show (TextError (t,_)) = show t

instance Eq TextError where
  TextError (t,_) == TextError (t',_) = t == t'

instance HasCallstack TextError where
  callstack = lens (\ (TextError (_,cs)) ‚Üí cs)
                   (\ (TextError (t,_)) cs ‚Üí
                       TextError (t,cs))

instance Printable TextError where
  print (TextError (t,_)) = P.text $ "TextError: " ‚äï t

------------------------------------------------------------

{- | An error that might be of type `ProcOutputParseError` -}
class AsTextError Œµ where
  _TextError ‚à∑ Prism' Œµ TextError

instance AsTextError TextError where
  _TextError = id

----------------------------------------

asTextError ‚à∑ (AsTextError Œµ, HasCallStack, Printable œÅ) ‚áí œÅ ‚Üí Œµ
asTextError t = _TextError # TextError (toText t,callStack)

--------------------

throwAsTextError  ‚à∑ ‚àÄ Œµ Œ± Œ∑ . (AsTextError Œµ, MonadError Œµ Œ∑, HasCallStack)‚áí
                    ùïã ‚Üí Œ∑ Œ±
throwAsTextError t = throwError $ _TextError # TextError (t,callStack)

----------

“© :: ‚àÄ Œµ Œ± Œ∑ . (AsTextError Œµ, MonadError Œµ Œ∑, HasCallStack) ‚áí ùïã -> Œ∑ Œ±
“© = throwAsTextError

----------------------------------------

{-| Convert some printable error to a `TextError`, probably for throwing into
    a `ScriptError`. -}
throwToTextError ‚à∑ ‚àÄ Œµ Œ≤ Œ± Œ∑ . (AsTextError Œµ, Printable Œ±, MonadError Œµ Œ∑) ‚áí
              ùîº Œ± Œ≤ ‚Üí Œ∑ Œ≤
throwToTextError x = case x of
                       ùï∑ e ‚Üí throwAsTextError (toText e)
                       ùïΩ r ‚Üí return r

----------

“©“© ‚à∑ ‚àÄ Œµ Œ≤ Œ± Œ∑ . (AsTextError Œµ, Printable Œ±, MonadError Œµ Œ∑) ‚áí ùîº Œ± Œ≤ ‚Üí Œ∑ Œ≤
“©“© = throwToTextError

------------------------------------------------------------

{-| Generic error for scripts, intended to encompass all other general-purpose
    script error types (so may be upgraded in future to include more things.
 -}
data ScriptError = UPFPPIOOP_ERROR UsageParseFPProcIOOPError
                 | B_ERROR         TextError
  deriving (Eq,Generic,Show)

_UPFPPIOOP_ERROR ‚à∑ Prism' ScriptError UsageParseFPProcIOOPError
_UPFPPIOOP_ERROR =
  prism' (\ e ‚Üí UPFPPIOOP_ERROR e) (\ case UPFPPIOOP_ERROR e ‚Üí ùïµ e; _ ‚Üí ùïπ)

_B_ERROR ‚à∑ Prism' ScriptError TextError
_B_ERROR = prism' (\ e ‚Üí B_ERROR e) (\ case B_ERROR e ‚Üí ùïµ e; _ ‚Üíùïπ)

instance Exception ScriptError

instance HasCallstack ScriptError where
  callstack =
    lens (\ case (UPFPPIOOP_ERROR popepe) ‚Üí popepe  ‚ä£ callstack
                 (B_ERROR popeope)        ‚Üí popeope ‚ä£ callstack)
         (\ pe cs ‚Üí case pe of
                      (UPFPPIOOP_ERROR popepe) ‚Üí
                        UPFPPIOOP_ERROR $ popepe & callstack ‚ä¢ cs
                      (B_ERROR popeope) ‚Üí B_ERROR $ popeope & callstack ‚ä¢ cs
         )

instance AsCreateProcError ScriptError where
 _CreateProcError = _UPFPPIOOP_ERROR ‚àò _CreateProcError

instance AsIOError ScriptError where
  _IOError = _UPFPPIOOP_ERROR ‚àò _IOError

instance AsFPathError ScriptError where
  _FPathError = _UPFPPIOOP_ERROR ‚àò _FPathError

instance AsProcExitError ScriptError where
  _ProcExitError = _UPFPPIOOP_ERROR ‚àò _ProcExitError

instance Printable ScriptError where
  print (UPFPPIOOP_ERROR pexe   ) = print pexe
  print (B_ERROR         popeope)  = print popeope

instance AsProcOutputParseError ScriptError where
  _ProcOutputParseError = _UPFPPIOOP_ERROR ‚àò _ProcOutputParseError

instance AsUsageError ScriptError where
  _UsageError  = _UPFPPIOOP_ERROR ‚àò _UsageError

instance AsTextError ScriptError where
  _TextError = _B_ERROR

-- that's all, folks! ----------------------------------------------------------
