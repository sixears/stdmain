{-# LANGUAGE ConstraintKinds        #-}
{-# LANGUAGE DataKinds              #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses  #-}
{-# LANGUAGE NoImplicitPrelude      #-}
{-# LANGUAGE OverloadedStrings      #-}
{-# LANGUAGE QuasiQuotes            #-}
{-# LANGUAGE RankNTypes             #-}
{-# LANGUAGE UnicodeSyntax          #-}

module StdMain.StdOptions
  ( DryRunLevel, HasDryRun, HasDryRunLevel( dryRunLevel, level )
  , ReadDryRunLevel, StdOptions
  , askDryRunL, dryRunOff, dryRunOn, dryRunP, dryRun1P, dryRun2P
  , ifDryRun, ifDryRunEq, ifDryRunGE, options, parseStdOptions, unlessDryRunGE
  )
where

import Prelude  ( pred, succ )

-- base --------------------------------

import Data.Bool      ( Bool )
import Data.Foldable  ( foldr )
import Data.Function  ( ($),  const, id )
import Text.Show      ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â°) )
import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )
import Data.Ord.Unicode       ( (‚â•) )

-- lens --------------------------------

import Control.Lens.Getter  ( view )
import Control.Lens.Iso     ( iso )
import Control.Lens.Lens    ( Lens', lens )

-- log-plus ----------------------------

import Log.HasSeverity  ( HasSeverity( severity ) )

-- logging-effect ----------------------

import Control.Monad.Log  ( Severity( Debug, Warning ) )

-- more-unicode ------------------------

import Data.MoreUnicode  ( (‚à§), (‚ä≥), (‚äµ), ùîπ, ‚Ñï )

-- mtl ---------------------------------

import Control.Monad.Reader  ( MonadReader, ask )

-- natural-plus ------------------------

import Natural  ( AtMost( Cons, Nil ), Countable( count ), Nat( S ), Natty
                , One, Two, atMost, atMostOne, atMostTwo, count, four, replicate
                , three
                )

-- optparse-applicative ----------------

import Options.Applicative  ( FlagFields, Mod, Parser
                            , flag', internal, long, short )

-- optparse-plus -------------------------

import OptParsePlus  ( parsecOption )

-- tfmt --------------------------------

import Text.Fmt  ( fmt )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import StdMain.VerboseOptions  ( HasVerboseOptions( verboseOptions )
                               , VerboseOptions, defVOpts )

--------------------------------------------------------------------------------

{- | Curryable if-then-else; flippety-`flip` of `Data.Bool.bool`. -}
ifThenElse ‚à∑ Bool ‚Üí a ‚Üí a ‚Üí a
ifThenElse b t e = if b then t else e

----------------------------------------

data DryRunN = DryRunN
  deriving Show

newtype DryRunLevel n = DryRunLevel { _level ‚à∑ AtMost n DryRunN }

class HasDryRunLevel n c | c ‚Üí n where
  dryRunLevel ‚à∑ Lens' c (DryRunLevel n)
  level       ‚à∑ Lens' c (AtMost n DryRunN)
  {-# INLINE level #-}
  level       =  dryRunLevel ‚àò level

instance HasDryRunLevel n (DryRunLevel n) where
  dryRunLevel = id
  level       = iso ( \ (DryRunLevel x) ‚Üí x) DryRunLevel

instance HasDryRunLevel n (AtMost n DryRunN) where
  dryRunLevel = lens DryRunLevel (const ‚àò view level)

instance Show (DryRunLevel n) where
  show (DryRunLevel d) = [fmt|DryRun: %d|] (count d)

type DryRun = DryRunLevel One
type HasDryRun = HasDryRunLevel One

instance Countable (DryRunLevel ŒΩ) where
  count (DryRunLevel n) = count n

------------------------------------------------------------

type ReadDryRunLevel ŒΩ Œ∑ = MonadReader (DryRunLevel ŒΩ) Œ∑

askDryRunL ‚à∑ ReadDryRunLevel ŒΩ Œ∑ ‚áí Œ∑ (DryRunLevel ŒΩ)
askDryRunL = ask

----------------------------------------

dryRunLvl' ‚à∑ DryRunLevel n ‚Üí ‚Ñï
dryRunLvl' (DryRunLevel d) = count d

dryRunLvl ‚à∑ HasDryRunLevel n s ‚áí s ‚Üí ‚Ñï
dryRunLvl = dryRunLvl' ‚àò view dryRunLevel

ifDryRunP ‚à∑ ReadDryRunLevel ŒΩ Œ∑ ‚áí (‚Ñï ‚Üí ùîπ) ‚Üí Œ± ‚Üí Œ± ‚Üí Œ∑ Œ±
ifDryRunP f go nogo = (\ drl ‚Üí ifThenElse (f (dryRunLvl drl)) go nogo) ‚ä≥ ask
  
ifDryRunEq ‚à∑ ReadDryRunLevel ŒΩ Œ∑ ‚áí ‚Ñï ‚Üí Œ± ‚Üí Œ± ‚Üí Œ∑ Œ±
ifDryRunEq i = ifDryRunP (‚â° i)

ifDryRunGE ‚à∑ ReadDryRunLevel ŒΩ Œ∑ ‚áí ‚Ñï ‚Üí Œ± ‚Üí Œ± ‚Üí Œ∑ Œ±
ifDryRunGE i = ifDryRunP (‚â• i)

ifDryRun ‚à∑ ReadDryRunLevel ŒΩ Œ∑ ‚áí Œ± ‚Üí Œ± ‚Üí Œ∑ Œ±
ifDryRun = ifDryRunGE 1

unlessDryRunGE ‚à∑ ReadDryRunLevel ŒΩ Œ∑ ‚áí ‚Ñï ‚Üí Œ± ‚Üí Œ± ‚Üí Œ∑ Œ±
unlessDryRunGE i d n = ifDryRunGE i n d

----------------------------------------

flagDryRun ‚à∑ Parser DryRunN
-- marked as 'internal' because better help is in the Standard options footer
flagDryRun = flag' DryRunN (long "dry-run" ‚äï internal)

dryRunOff ‚à∑ DryRunLevel ('S n)
dryRunOff = DryRunLevel Nil

dryRunOn ‚à∑ DryRunLevel ('S n)
dryRunOn  = DryRunLevel (Cons DryRunN Nil)

----------------------------------------

dryRunP ‚à∑ Natty ŒΩ ‚Üí Parser (DryRunLevel ŒΩ)
dryRunP n = DryRunLevel ‚ä≥ atMost n flagDryRun

----------

dryRun1P ‚à∑ Parser DryRun
dryRun1P = DryRunLevel ‚ä≥ atMostOne flagDryRun

----------

dryRun2P ‚à∑ Parser (DryRunLevel Two)
dryRun2P = DryRunLevel ‚ä≥ atMostTwo flagDryRun

------------------------------------------------------------

{- | Default Severity level; start with Warning, -v goes to Notice then
     Informational. -}
defaultSev ‚à∑ Severity
defaultSev = Warning

----------------------------------------

data StdOptions ŒΩ Œ± = StdOptions { _nonBaseOptions ‚à∑ Œ±
                                 , _verboseOptions ‚à∑ VerboseOptions
                                 , _dryRunLevel    ‚à∑ DryRunLevel ŒΩ
                                 }
  deriving Show

instance HasDryRunLevel ŒΩ (StdOptions ŒΩ Œ±) where
  dryRunLevel = lens _dryRunLevel (\ so drl ‚Üí so { _dryRunLevel = drl })

instance HasVerboseOptions (StdOptions ŒΩ Œ±) where
  verboseOptions = lens _verboseOptions (\ so vo ‚Üí so { _verboseOptions = vo })

instance HasSeverity (StdOptions ŒΩ Œ±) where
  severity = verboseOptions ‚àò severity

options ‚à∑ Lens' (StdOptions ŒΩ Œ±) Œ±
options = lens _nonBaseOptions
               (\ s nonBaseOptions ‚Üí s { _nonBaseOptions = nonBaseOptions })

parseStdOptions ‚à∑ Natty ŒΩ ‚Üí Parser Œ± ‚Üí Parser (StdOptions ŒΩ Œ±)
parseStdOptions n p =
  let -- up to n flags, each invoking an instance of a function
      flagn ‚à∑ Natty ŒΩ ‚Üí Mod FlagFields () ‚Üí (Œ± ‚Üí Œ±) ‚Üí Œ± ‚Üí Parser Œ±
      flagn i m f a =
        (\ c ‚Üí foldr ($) a (replicate (count c) f)) ‚ä≥ atMost i (flag' () m)
      flagsev ‚à∑ Natty ŒΩ ‚Üí Mod FlagFields () ‚Üí (Severity ‚Üí Severity)
              ‚Üí Parser VerboseOptions
      flagsev i m f = defVOpts ‚ä≥ flagn i m f defaultSev
      -- marked as 'internal' because a better description is in the Standard
      -- Options footer
      flagv         = flagsev three (short 'v' ‚äï internal) succ
      flagq         = flagsev four (long "quiet" ‚äï internal)
                              pred
      flagd         = defVOpts ‚ä≥ flag' Debug (long "debug" ‚äï internal)
      verbose       = parsecOption (long "verbose")
   in StdOptions ‚ä≥ p
                 ‚äµ (flagv ‚à§ flagq ‚à§ flagd ‚à§ verbose)
                 ‚äµ dryRunP n

-- that's all, folks! ----------------------------------------------------------
