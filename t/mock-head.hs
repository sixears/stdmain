{-# LANGUAGE LambdaCase        #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE QuasiQuotes       #-}
{-# LANGUAGE RankNTypes        #-}
{-# LANGUAGE UnicodeSyntax     #-}

import Base1T

-- base --------------------------------

import qualified  System.IO

import Control.Applicative     ( optional )
import Data.List               ( take )
import System.IO               ( Handle, IOMode( WriteMode ), stdout )

-- fpath -------------------------------

import FPath.AbsFile    ( AbsFile )
import FPath.Parseable  ( readM )

-- log-plus ----------------------------

import Log  ( Log )

-- logging-effect ----------------------

import Control.Monad.Log  ( MonadLog, Severity( Informational, Notice ) )

-- optparse-applicative ----------------

import Options.Applicative  ( Parser
                            , help, long, metavar, option, short, strArgument )

-- std-main ----------------------------

import StdMain             ( stdMainSimple )
import StdMain.UsageError  ( AsUsageError )

-- text --------------------------------

import qualified  Data.Text.IO

import Data.Text     ( Text, lines, unlines, unpack )
import Data.Text.IO  ( hPutStr )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import MockIO          ( DoMock( NoMock ) )
import MockIO.Log      ( MockIOClass, mkIOL )
import MockIO.IOClass  ( IOClass( IORead, IOWrite ) )

--------------------------------------------------------------------------------

-- a very simple version of 'head', for testing MockIO

data Options = Options { fileName  ‚à∑ Text
                       , outputFile ‚à∑ Maybe AbsFile
                       }
  deriving Show

parseOptions ‚à∑ Parser Options
parseOptions = Options ‚ä≥ strArgument (metavar "FILE")
                       ‚äµ optional (option readM (—é [ long "output"
                                                   , short 'o'
                                                   , metavar "FILE"
                                                   , help "write output here"
                                                   ])
                                  )

main ‚à∑ IO ()
main = -- XXX Tidy This Up
       -- add 'append' to log file options
       -- log rolling!
       -- add Logging to withFile
       -- cmd logging using showcmdforuser

       stdMainSimple ("simple 'head' re-implementation to test MockIO" ‚à∑ ùïã)
                     parseOptions go

go ‚à∑ (MonadLog (Log MockIOClass) Œº, MonadIO Œº, MonadError Œµ Œº, AsUsageError Œµ) ‚áí
     DoMock ‚Üí Options ‚Üí Œº ()
go mck opts = do
  let fn = fileName opts
  txt ‚Üê take 10 ‚àò lines ‚ä≥ readFile fn
  writeFile mck (outputFile opts) (unlines txt)

withFile ‚à∑ MonadIO Œº ‚áí AbsFile ‚Üí IOMode ‚Üí (Handle ‚Üí IO œâ) ‚Üí Œº œâ
withFile fn mode = liftIO ‚àò System.IO.withFile (toString fn) mode

{- | With a file opened for writing, or `stdout` if no file provided. -}
withWriteFile ‚à∑ (MonadIO Œº, MonadLog (Log MockIOClass) Œº) ‚áí
                DoMock ‚Üí Œ± ‚Üí Maybe AbsFile ‚Üí (Handle ‚Üí IO Œ±) ‚Üí Œº Œ±
withWriteFile mck a fn io = do
  let fname  = maybe "-STDOUT-" toText fn
      logmsg = [fmtT|write %t|] fname
  case fn of
    Nothing  ‚Üí liftIO $ io stdout
    Just wfn ‚Üí mkIOL Notice IOWrite logmsg a (withFile wfn WriteMode io) mck

writeFile ‚à∑ (MonadIO Œº, MonadLog (Log MockIOClass) Œº) ‚áí
            DoMock ‚Üí Maybe AbsFile ‚Üí Text ‚Üí Œº ()
writeFile mck fnY txt = withWriteFile mck () fnY (\ h ‚Üí hPutStr h txt)

readFile ‚à∑ (MonadIO Œº, MonadLog (Log MockIOClass) Œº) ‚áí Text ‚Üí Œº Text
readFile fn = let logmsg = [fmtT|read %t|] fn
                  result = Data.Text.IO.readFile (unpack fn)
               in mkIOL Informational IORead logmsg "" result NoMock

-- that's all, folks! ----------------------------------------------------------
